#To check meta parameters

#nextflow run . --input assets/samplesheet.csv --outdir . 
nextflow run . --input assets/samplesheet.csv --outdir test_output/ -dump-channels -profile docker


# debugging bash 
    #!/bin/bash

    cat > ${prefix}_params.txt <<EOL
    --randomSeed,${meta.seed}
    --attributeAlleleFrequency,${meta.MAF_interacting_associates_attributes}
    --prevalence,${meta.prevalence}
    --heritability,${meta.heritability}
    --useOddsRatio,${meta.useOddsRatio}
    --quantile_counts,${meta.quantile_counts}
    --population_count,${meta.population_counts}
    --trycount,${meta.trycount}
    --proportion,${meta.proportion}
    EOL


     #!/bin/bash

    cat <<EOF > ${prefix}_params.txt 
    --randomSeed,${meta.seed}
    --attributeAlleleFrequency,${meta.MAF_interacting_associates_attributes}
    --prevalence,${meta.prevalence}
    --heritability,${meta.heritability}
    --useOddsRatio,${meta.useOddsRatio}
    --quantile_counts,${meta.quantile_counts}
    --population_count,${meta.population_counts}
    --trycount,${meta.trycount}
    --proportion,${meta.proportion}


    seed=1
    MAF_interacting_associates_attributes=0.2
    prevalence=0.2
    heritability=0.2
    useOddsRatio="",
    quantile_counts=1 
    population_counts=1
    trycount=90000
    proportion=0.2


    cat << 'EOF' >> TEST_params.txt 
    --randomSeed,${seed}
    --attributeAlleleFrequency,${MAF_interacting_associates_attributes}
    --prevalence,${prevalence}
    --heritability,${heritability}
    --useOddsRatio,${useOddsRatio}
    --quantile_counts,${quantile_counts}
    --population_count,${population_counts}
    --trycount,${trycount}
    --proportion,${proportion}
    EOF



seed=${meta.seed}
MAF_interacting_associates_attributes=${meta.MAF_interacting_associates_attributes}
prevalence=${meta.prevalence}
heritability=${meta.heritability}
useOddsRatio=${meta.useOddsRatio}
quantile_counts=${meta.quantile_counts}
population_counts=${meta.population_counts}
trycount=${meta.trycount}
proportion=${meta.proportion}


cat <<'EOF' >> TEST_params.txt 
    --randomSeed,${seed}
    --attributeAlleleFrequency,${MAF_interacting_associates_attributes}
    --prevalence,${prevalence}
    --heritability,${heritability}
    --useOddsRatio,${useOddsRatio}
    --quantile_counts,${quantile_counts}
    --population_count,${population_counts}
    --trycount,${trycount}
    --proportion,${proportion}
EOF



    def seed = ${meta.seed}
    MAF_interacting_associates_attributes=${meta.MAF_interacting_associates_attributes}
    prevalence=${meta.prevalence}
    heritability=${meta.heritability}
    useOddsRatio=${meta.useOddsRatio}
    quantile_counts=${meta.quantile_counts}
    population_counts=${meta.population_counts}
    trycount=${meta.trycount}
    proportion=${meta.proportion}



    
    cat <<'EOF' >> ${prefix}_params.txt 
    --randomSeed,${seed}
    --attributeAlleleFrequency,${MAF_interacting_associates_attributes}
    --prevalence,${prevalence}
    --heritability,${heritability}
    --useOddsRatio,${useOddsRatio}
    --quantile_counts,${quantile_counts}
    --population_count,${population_counts}
    --trycount,${trycount}
    --proportion,${proportion}
    EOF




--randomSeed,123
--attributeAlleleFrequency,0.3
--prevalence,0.6
--heritability,0.3
--proportion,0.3
--useOddsRatio,
--trycount,"90000
--quantile_counts,2
--population_counts,10


process COLLECTINPUT {
    tag "$meta.id"
    label 'process_single'

    conda "${moduleDir}/environment.yml"
    container "${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?
        'https://depot.galaxyproject.org/singularity/biopython:1.70--np112py35_1':
        'biocontainers/biopython:1.70--np112py35_1' }"

    input:
    val(meta)

    output:
    tuple val(meta), path("*_params.txt"), emit: dict

    when:
    task.ext.when == null || task.ext.when

    script:
    def args = task.ext.args ?: ''
    def prefix = task.ext.prefix ?: "${meta.id}"

    """
    declare -A gametesm=(
    ["seed"]="--randomSeed"
    ["MAF_for_interacting_associates_attributes"]="--attributeAlleleFrequency"
    ["prevalence"]="--prevalence"
    ["heritability"]="--heritability"
    ["useOddsRatio"]="--useOddsRatio"
    ["quantile_counts"]="--quantile_counts"
    ["population_counts"]="--population_counts"
    ["trycount"]="--trycount"
    ["proportion"]="--proportion"
)


    cat > ${prefix}_params.txt <<EOL
    --randomSeed,${meta.seed}
    --attributeAlleleFrequency,${meta.MAF_interacting_associates_attributes}
    --prevalence,${meta.prevalence}
    --heritability,${meta.heritability}
    --useOddsRatio,${meta.useOddsRatio}
    --quantile_counts,${meta.quantile_counts}
    --population_count,${meta.population_counts}
    --trycount,${meta.trycount}
    --proportion,${meta.proportion}
    EOL    
    
    """
}



#### last


nf-test test modules/nf-core/collectinput/tests/main.nf.test --profile docker --update-snapshot


nextflow_process {

    name "Test Process COLLECTINPUT"
    script "../main.nf"
    process "COLLECTINPUT"

    tag "modules"
    tag "modules_nfcore"
    tag "collectinput"

    test("collectinput - meta with useOddsRatio") {

        when {
            process {
                """
                input[0] = [
                    simulation_model: "test1",
                    MAF_interacting_associates_attributes: 0.3,
                    seed: 123,
                    prevalence: 0.6,
                    heritability: 0.3,
                    useOddsRatio: true,
                    quantile_counts: 2,
                    population_counts: 10,
                    trycount: 90000,
                    proportion: 0.3
                ]
                """
            }
        }

        then {
            println "Debug: process.out = ${process.out}"
            assertAll(
                { assert process.success },
                { assert process.out.gametes != null },
                { assert process.out.gametes[0] != null },
                { assert process.out.gametes[0][1] != null },
                { assert path(process.out.gametes[0][1]).exists() },
                { assert process.out.versions != null },
                { assert process.out.versions[0] != null },
                { assert path(process.out.versions[0]).exists() },
                { assert snapshot(process.out.gametes[0][1].readLines()).match("params_with_useOddsRatio") },
                { assert snapshot(process.out.versions[0].readLines()).match("versions") }
            )
        }
    }

    test("collectinput - meta without useOddsRatio") {

        when {
            process {
                """
                input[0] = [
                    simulation_model: "test2",
                    MAF_interacting_associates_attributes: 0.4,
                    seed: 456,
                    prevalence: 0.5,
                    heritability: 0.4,
                    quantile_counts: 3,
                    population_counts: 15,
                    trycount: 80000,
                    proportion: 0.4
                ]
                """
            }
        }

        then {
            println "Debug: process.out = ${process.out}"
            assertAll(
                { assert process.success },
                { assert process.out.gametes != null },
                { assert process.out.gametes[0] != null },
                { assert process.out.gametes[0][1] != null },
                { assert path(process.out.gametes[0][1]).exists() },
                { assert process.out.versions != null },
                { assert process.out.versions[0] != null },
                { assert path(process.out.versions[0]).exists() },
                { assert snapshot(process.out.gametes[0][1].readLines()).match("params_without_useOddsRatio") },
                { assert snapshot(process.out.versions[0].readLines()).match("versions") }
            )
        }
    }
}



process COLLECTINPUT {
    tag "$meta.simulation_model"
    label 'process_single'

    conda "${moduleDir}/environment.yml"
    container "${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?
        'https://depot.galaxyproject.org/singularity/biopython:1.70--np112py35_1':
        'biocontainers/biopython:1.70--np112py35_1' }"

    input:
    val(meta)

    output:
    tuple val(meta), path("*_gametes.txt"), emit: gametes
    path "versions.yml"                   , emit: versions

    when:
    task.ext.when == null || task.ext.when

    script:
    def args = task.ext.args ?: ''
    def prefix = task.ext.prefix ?: "${meta.simulation_model}"

    """
    echo "Debug: Meta content"
    echo '${meta.inspect()}'

    cat <<EOF > ${prefix}_gametes.txt
    --randomSeed,${meta.seed}
    --attributeAlleleFrequency,${meta.MAF_interacting_associates_attributes}
    --prevalence,${meta.prevalence}
    --heritability,${meta.heritability}
    ${meta.useOddsRatio ? '--useOddsRatio' : ''}
    --quantile_counts,${meta.quantile_counts}
    --population_counts,${meta.population_counts}
    --trycount,${meta.trycount}
    --proportion,${meta.proportion}
EOF

    cat <<EOF > versions.yml
    "${task.process}":
        biopython: \$(python -c "import Bio; print(Bio.__version__)")
EOF

    echo "Debug: Content of ${prefix}_gametes.txt"
    cat ${prefix}_gametes.txt
    echo "Debug: Content of versions.yml"
    cat versions.yml 

    """
}

#biopython



### json schema

{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/nf-core/variantsimulator/master/assets/schema_input.json",
    "title": "nf-core/variantsimulator pipeline - params.input schema",
    "description": "Schema for the file provided with params.input",
    "type": "array",
    "items": {
        "type": "object",
        "properties": {
            "simulation_model": {
                "type": "string",
                "pattern": "^\\S+$",
                "description": "model name to simulate",
                "meta": ["simulation_model"]
            },
            "seed": {
                "type": "number",
                "description": "seed number"
            },
            "chromosome": {
                "type": "number",
                "description": "Human chromosome number"
            },
            "population": {
                "type": "string",
                "pattern": "^\\S+$",
                "description": "Population ancestry among AFR (African), AMR (Admixed American), EAS (East Asian), EUR/CEU (European), CSA (Central or South Asian), MID (Middle Eastern): ",
                "enum": ["AFR", "AMR", "EAS", "CEU", "CSA", "MID"],
                "meta": ["population"]
            },
            "output_dir": {
                "type": "string",
                "pattern": "^\\S+$",
                "description": "Name of the output directory",
                "meta": ["output_dir"]
            },
            "output_prefix": {
                "type": "string",
                "pattern": "^\\S+$",
                "description": "Prefix of the outputs",
                "meta": ["output_prefix"]
            }, 
            "no_predictive_attributes": {
                "type": "number",
                "description": "Number of predictive variants to simulate",
                "meta": ["no_predictive_attributes"]
            }, 
            "no_non_predictive_total_attributes": {
                "type": "number",
                "description": "Number of total variants within the VCF file to simulate",
                "meta": ["no_non_predictive_total_attributes"]
            }, 
            "MAF_min_non_predictive_attributes": {
                "type": "number",
                "description": "Min value of AF for non predictive variants",
                "meta": ["MAF_min_non_predictive_attributes"]
            }, 
            "MAF_max_non_predictive_attributes": {
                "type": "number",
                "description": "Max value of AF for non predictive variants",
                "meta": ["MAF_max_non_predictive_attributes"]
            }, 
            "MAF_interacting_associates_attributes": {
                "type": "number",
                "description": "Max value of AF for simulated interacting variants",
                "meta": ["MAF_interacting_associates_attributes"]
            }, 
            "no_cases": {
                "type": "number",
                "description": "Number of case samples",
                "meta": ["no_cases"]
            }, 
            "no_controls": {
                "type": "number",
                "description": "Number of controls samples",
                "meta": ["no_controls"]
            }, 
            "no_total_individuals": {
                "type": "number",
                "description": "Number of total samples",
                "meta": ["no_total_individuals"]
            }, 
            "prevalence": {
                "type": "number",
                "description": "Fraction of people in a specified group at a given time featuring a variant or a disorder",
                "meta": ["prevalence"]
            }, 
            "polygenicity": {
                "type": "number",
                "description": "The number of independently associated SNPs describing how the heritability of a trait is spread across the genom",
                "meta": ["polygenicity"]
            }, 
            "pleiotropy": {
                "type": "number",
                "description": "Condition in which a single gene contributes to multiple phenotypic traits",
                "meta": ["pleiotropy"]
            }, 
            "heritability": {
                "type": "number",
                "description": "The amount of phenotypic variation in a trait or disease that is attributable to genetic differences",
                "meta": ["heritability"]
            }, 
            "no_replicates": {
                "type": "number",
                "description": "Number of dataset replicates",
                "meta": ["no_replicates"]
            }, 
            "batchsize": {
                "type": "number",
                "description": "",
                "meta": ["batchsize"]
            }, 
            "size": {
                "type": "number",
                "description": "",
                "meta": ["size"]
            }, 
            "alpha": {
                "type": "number",
                "description": "risk witih",
                "meta": ["alpha"]
            }, 
            "useOddsRatio": {
                "type": "string",
                "pattern": "^\\S+$",
                "description": "Odds Ratio difficulty metrics. When not set, Gametes returns EDM difficulty metrics",
                "meta": ["useOddsRatio"]
            },
            "proportion": {
                "type": "number",
                "description": "proportion value for "-M" gametes command,
                "meta": ["proportion"]
            }, 
            "quantile_counts": {
                "type": "number",
                "description": "The number of random model architectures to save to the model output file (gametes),
                "meta": ["quantile_counts"]
            }, 
            "population_counts": {
                "type": "number",
                "description": "The number random model architectures GAMETES to try and generate for the given model constraints,
                "meta": ["population_counts"]
            }, 
            "trycount": {
                "type": "number",
                "description": "The number of Gametes model generation attempts. Min value= 90000,
                "meta": ["trycount"]
            }, 
            "dataset": {
                "type": "string",
                "pattern": "^\\S+$",
                "description": "Gametes command to create dataset",
                "meta": ["dataset"]
            },
            "AF_min": {
                "type": "number",
                "description": "Min value of AF for predictive variants",
                "meta": ["AF_min"]
            }, 
            "AF_max": {
                "type": "number",
                "description": "Max value of AF for predictive variants",
                "meta": ["AF_max"]
            },
            "fastq_2": {
                "type": "string",
                "format": "file-path",
                "exists": true,
                "pattern": "^\\S+\\.f(ast)?q\\.gz$",
                "errorMessage": "FastQ file for reads 2 cannot contain spaces and must have extension '.fq.gz' or '.fastq.gz'"
            }
        },
        "required": ["simulation_model", "seed"]
    }
}



### csv input

    seed=1
    MAF_interacting_associates_attributes=0.2
    prevalence=0.2
    heritability=0.2
    useOddsRatio="",
    quantile_counts=1 
    population_counts=1
    trycount=90000
    proportion=0.2

--randomSeed,1
--attributeAlleleFrequency,0.2
--prevalence,0.2
--heritability,0.6
--useOddsRatio,
--quantile_counts,1
--population_counts,10
--trycount,90000
--proportion,0.2


nf-test test modules/nf-core/gametes/generatemodels/main.nf.test --profile conda --update-snapshot


ssh msantors@login01-ext.leonardo.cineca.it -o hashknownhosts=no
ssh msantors@login02-ext.leonardo.cineca.it -o hashknownhosts=no
ssh msantors@login05-ext.leonardo.cineca.it -o hashknownhosts=no
ssh msantors@login07-ext.leonardo.cineca.it -o hashknownhosts=no


step ca bootstrap --ca-url=https://sshproxy.hpc.cineca.it --fingerprint 2ae1543202304d3f434bdc1a2c92eff2cd2b02110206ef06317e70c1c1735ecd

eval $(ssh-agent)

cd ~/.ssh/
step ssh login 'ma.santorsola@gmail.com' --provisioner cineca-hpc


